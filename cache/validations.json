{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "127e95ebf310a0fcefe8ff788f1b4cc95f07b31c110a65f480d83135bad4cb30",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosCLOB.sol:LegosCLOB": {
        "src": "contracts/core/LegosCLOB.sol:16",
        "version": {
          "withMetadata": "405aaf9820f41c738d2d2392d5878faed63597e75d675b8e66c3d8a64b46ea2a",
          "withoutMetadata": "097a629f3b01e3dc4c916cd8322f022af073f1b7c34c2a8ced75858c36607529",
          "linkedWithoutMetadata": "097a629f3b01e3dc4c916cd8322f022af073f1b7c34c2a8ced75858c36607529"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/ILegosCore.sol:ILegosCore"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address)",
          "placeLendOrder(address,uint256,uint256,uint256,uint256,address,uint256)",
          "placeBorrowOrder(address,uint256,uint256,uint256,address,uint256,uint256)",
          "cancelOrder(uint256)",
          "getBestLendingRate(address)",
          "getBestBorrowingRate(address)",
          "getOrderBookDepth(address,bool)",
          "getUserOrders(address)",
          "getUserLoans(address)",
          "executeMarketOrder(address,uint256,bool,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosCLOB",
            "src": "contracts/core/LegosCLOB.sol:63"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextOrderId",
            "src": "contracts/core/LegosCLOB.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextLoanId",
            "src": "contracts/core/LegosCLOB.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "protocolFee",
            "src": "contracts/core/LegosCLOB.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "_nextOrderId",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:21"
            },
            {
              "label": "_nextLoanId",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:22"
            },
            {
              "label": "orders",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(Order)6246_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:25"
            },
            {
              "label": "loans",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(Loan)6275_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:26"
            },
            {
              "label": "userOrders",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:27"
            },
            {
              "label": "userLoans",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:28"
            },
            {
              "label": "userCollateral",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:29"
            },
            {
              "label": "assetRiskParams",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(RiskParameters)6340_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:30"
            },
            {
              "label": "lendOrdersByRate",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:33"
            },
            {
              "label": "borrowOrdersByRate",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:34"
            },
            {
              "label": "activeLendRates",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:35"
            },
            {
              "label": "activeBorrowRates",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:36"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LoanStatus)6210": {
              "label": "enum ILegosCore.LoanStatus",
              "members": [
                "ACTIVE",
                "REPAID",
                "LIQUIDATED",
                "DEFAULTED"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(OrderStatus)6204": {
              "label": "enum ILegosCore.OrderStatus",
              "members": [
                "PENDING",
                "PARTIALLY_FILLED",
                "FILLED",
                "CANCELLED",
                "EXPIRED"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(OrderType)6197": {
              "label": "enum ILegosCore.OrderType",
              "members": [
                "LEND",
                "BORROW"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RiskParameters)6340_storage)": {
              "label": "mapping(address => struct ILegosCore.RiskParameters)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Loan)6275_storage)": {
              "label": "mapping(uint256 => struct ILegosCore.Loan)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Order)6246_storage)": {
              "label": "mapping(uint256 => struct ILegosCore.Order)",
              "numberOfBytes": "32"
            },
            "t_struct(Loan)6275_storage": {
              "label": "struct ILegosCore.Loan",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "principalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "remainingPrincipal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "accruedInterest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "status",
                  "type": "t_enum(LoanStatus)6210",
                  "offset": 0,
                  "slot": "12"
                }
              ],
              "numberOfBytes": "416"
            },
            "t_struct(Order)6246_storage": {
              "label": "struct ILegosCore.Order",
              "members": [
                {
                  "label": "orderId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "orderType",
                  "type": "t_enum(OrderType)6197",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "status",
                  "type": "t_enum(OrderStatus)6204",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "principalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "remainingAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "expiry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(RiskParameters)6340_storage": {
              "label": "struct ILegosCore.RiskParameters",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minCollateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosLendingPool.sol:LegosLendingPool": {
        "src": "contracts/core/LegosLendingPool.sol:18",
        "version": {
          "withMetadata": "ea5493d6b784dcc4574c30532fcb5833be7f29eddc204a922aafffff79554d8d",
          "withoutMetadata": "273c07537c93136aafa198381f4f3b0a4279d331f252bfd24c6fdd23596b1dff",
          "linkedWithoutMetadata": "273c07537c93136aafa198381f4f3b0a4279d331f252bfd24c6fdd23596b1dff"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "contracts/interfaces/ILegosCore.sol:ILegosCore",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address,address,string,string,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "borrow(uint256,address,uint256,uint256)",
          "repay(uint256)",
          "getSupplyAPY()",
          "getBorrowAPY()",
          "getAvailableLiquidity()",
          "getTotalPoolAssets()",
          "getUserBorrowBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosLendingPool",
            "src": "contracts/core/LegosLendingPool.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingAsset",
            "src": "contracts/core/LegosLendingPool.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "clob",
            "src": "contracts/core/LegosLendingPool.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityIndex",
            "src": "contracts/core/LegosLendingPool.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "borrowIndex",
            "src": "contracts/core/LegosLendingPool.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "poolConfig",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(PoolConfig)6328_storage",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:25"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:28"
            },
            {
              "label": "reserveBalance",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:29"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:30"
            },
            {
              "label": "liquidityIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:31"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:32"
            },
            {
              "label": "activeOrders",
              "offset": 0,
              "slot": "21",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:41"
            },
            {
              "label": "isPoolOrder",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:42"
            },
            {
              "label": "userBorrows",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:45"
            },
            {
              "label": "userBorrowIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(PoolConfig)6328_storage": {
              "label": "struct ILegosCore.PoolConfig",
              "members": [
                {
                  "label": "asset",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserveFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "baseRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "jumpMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "optimalUtilization",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosRiskManager.sol:LegosRiskManager": {
        "src": "contracts/core/LegosRiskManager.sol:17",
        "version": {
          "withMetadata": "b8c26b55c50844b702f46f07c21624debeea65d6f8a9ddd37ff94593e78c8a75",
          "withoutMetadata": "4f2ccdb383ef4ee68461d44698b9ab55cd6357f06fc80ead3fb6e7c20a4af954",
          "linkedWithoutMetadata": "4f2ccdb383ef4ee68461d44698b9ab55cd6357f06fc80ead3fb6e7c20a4af954"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/ILegosCore.sol:ILegosCore"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address,address)",
          "setAssetRiskParameters(address,(uint256,uint256,uint256,uint256,bool))",
          "updateAssetPrice(address,uint256)",
          "calculateHealthFactor(uint256)",
          "isLiquidationEligible(uint256)",
          "liquidateLoan(uint256,uint256)",
          "claimLiquidatorRewards()",
          "performHealthCheck()",
          "addToRiskMonitoring(uint256)",
          "getLoansAtRisk()",
          "getTotalValueAtRisk()",
          "getRiskMetrics()",
          "updateHealthCheckInterval(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosRiskManager",
            "src": "contracts/core/LegosRiskManager.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "clob",
            "src": "contracts/core/LegosRiskManager.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "healthCheckInterval",
            "src": "contracts/core/LegosRiskManager.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "assetRiskParams",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(RiskParameters)6340_storage)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:25"
            },
            {
              "label": "assetPrices",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:26"
            },
            {
              "label": "loanHealthFactors",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:27"
            },
            {
              "label": "liquidatorRewards",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:36"
            },
            {
              "label": "totalLiquidatorRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:37"
            },
            {
              "label": "lastHealthCheckTime",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:40"
            },
            {
              "label": "healthCheckInterval",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:41"
            },
            {
              "label": "riskLoans",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(RiskParameters)6340_storage)": {
              "label": "mapping(address => struct ILegosCore.RiskParameters)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RiskParameters)6340_storage": {
              "label": "struct ILegosCore.RiskParameters",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minCollateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/ILegosCore.sol:ILegosCore": {
        "src": "contracts/interfaces/ILegosCore.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LegosMath.sol:LegosMath": {
        "src": "contracts/libraries/LegosMath.sol:9",
        "version": {
          "withMetadata": "687cb131c106340451aed6a725c5d63e49babef83359683afc6cb5d2c7a77ec5",
          "withoutMetadata": "70a345d1845f5216f167686d39eff4733e483186424b446ca460c3db8e5a1480",
          "linkedWithoutMetadata": "70a345d1845f5216f167686d39eff4733e483186424b446ca460c3db8e5a1480"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "127e95ebf310a0fcefe8ff788f1b4cc95f07b31c110a65f480d83135bad4cb30",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosCLOB.sol:LegosCLOB": {
        "src": "contracts/core/LegosCLOB.sol:16",
        "version": {
          "withMetadata": "4d07c8b5da50c8a8a41636beef8bdfeb496b73027179a95c5278b51bd5e31b4b",
          "withoutMetadata": "429b68c2c47e78285660abcca410cda956c9ac189f6609e77047a67896c50671",
          "linkedWithoutMetadata": "429b68c2c47e78285660abcca410cda956c9ac189f6609e77047a67896c50671"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/ILegosCore.sol:ILegosCore"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address)",
          "placeLendOrder(address,uint256,uint256,uint256,uint256,address,uint256)",
          "placeBorrowOrder(address,uint256,uint256,uint256,address,uint256,uint256)",
          "cancelOrder(uint256)",
          "getBestLendingRate(address)",
          "getBestBorrowingRate(address)",
          "getOrderBookDepth(address,bool)",
          "getUserOrders(address)",
          "getUserLoans(address)",
          "executeMarketOrder(address,uint256,bool,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosCLOB",
            "src": "contracts/core/LegosCLOB.sol:63"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextOrderId",
            "src": "contracts/core/LegosCLOB.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextLoanId",
            "src": "contracts/core/LegosCLOB.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "protocolFee",
            "src": "contracts/core/LegosCLOB.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "_nextOrderId",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:21"
            },
            {
              "label": "_nextLoanId",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:22"
            },
            {
              "label": "orders",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(Order)6426_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:25"
            },
            {
              "label": "loans",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(Loan)6455_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:26"
            },
            {
              "label": "userOrders",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:27"
            },
            {
              "label": "userLoans",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:28"
            },
            {
              "label": "userCollateral",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:29"
            },
            {
              "label": "assetRiskParams",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(RiskParameters)6520_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:30"
            },
            {
              "label": "lendOrdersByRate",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:33"
            },
            {
              "label": "borrowOrdersByRate",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:34"
            },
            {
              "label": "activeLendRates",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:35"
            },
            {
              "label": "activeBorrowRates",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:36"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LoanStatus)6390": {
              "label": "enum ILegosCore.LoanStatus",
              "members": [
                "ACTIVE",
                "REPAID",
                "LIQUIDATED",
                "DEFAULTED"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(OrderStatus)6384": {
              "label": "enum ILegosCore.OrderStatus",
              "members": [
                "PENDING",
                "PARTIALLY_FILLED",
                "FILLED",
                "CANCELLED",
                "EXPIRED"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(OrderType)6377": {
              "label": "enum ILegosCore.OrderType",
              "members": [
                "LEND",
                "BORROW"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RiskParameters)6520_storage)": {
              "label": "mapping(address => struct ILegosCore.RiskParameters)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Loan)6455_storage)": {
              "label": "mapping(uint256 => struct ILegosCore.Loan)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Order)6426_storage)": {
              "label": "mapping(uint256 => struct ILegosCore.Order)",
              "numberOfBytes": "32"
            },
            "t_struct(Loan)6455_storage": {
              "label": "struct ILegosCore.Loan",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "principalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "remainingPrincipal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "accruedInterest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "status",
                  "type": "t_enum(LoanStatus)6390",
                  "offset": 0,
                  "slot": "12"
                }
              ],
              "numberOfBytes": "416"
            },
            "t_struct(Order)6426_storage": {
              "label": "struct ILegosCore.Order",
              "members": [
                {
                  "label": "orderId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "orderType",
                  "type": "t_enum(OrderType)6377",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "status",
                  "type": "t_enum(OrderStatus)6384",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "principalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "remainingAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "expiry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(RiskParameters)6520_storage": {
              "label": "struct ILegosCore.RiskParameters",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minCollateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosLendingPool.sol:LegosLendingPool": {
        "src": "contracts/core/LegosLendingPool.sol:18",
        "version": {
          "withMetadata": "4f7bbb5c77ddd2e08d39580a78c43a108b85ee082bb700a706ed74b9e4563fae",
          "withoutMetadata": "273c07537c93136aafa198381f4f3b0a4279d331f252bfd24c6fdd23596b1dff",
          "linkedWithoutMetadata": "273c07537c93136aafa198381f4f3b0a4279d331f252bfd24c6fdd23596b1dff"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "contracts/interfaces/ILegosCore.sol:ILegosCore",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address,address,string,string,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "borrow(uint256,address,uint256,uint256)",
          "repay(uint256)",
          "getSupplyAPY()",
          "getBorrowAPY()",
          "getAvailableLiquidity()",
          "getTotalPoolAssets()",
          "getUserBorrowBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosLendingPool",
            "src": "contracts/core/LegosLendingPool.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingAsset",
            "src": "contracts/core/LegosLendingPool.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "clob",
            "src": "contracts/core/LegosLendingPool.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityIndex",
            "src": "contracts/core/LegosLendingPool.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "borrowIndex",
            "src": "contracts/core/LegosLendingPool.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "poolConfig",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(PoolConfig)6508_storage",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:25"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:28"
            },
            {
              "label": "reserveBalance",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:29"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:30"
            },
            {
              "label": "liquidityIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:31"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:32"
            },
            {
              "label": "activeOrders",
              "offset": 0,
              "slot": "21",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:41"
            },
            {
              "label": "isPoolOrder",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:42"
            },
            {
              "label": "userBorrows",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:45"
            },
            {
              "label": "userBorrowIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(PoolConfig)6508_storage": {
              "label": "struct ILegosCore.PoolConfig",
              "members": [
                {
                  "label": "asset",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserveFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "baseRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "jumpMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "optimalUtilization",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosRiskManager.sol:LegosRiskManager": {
        "src": "contracts/core/LegosRiskManager.sol:17",
        "version": {
          "withMetadata": "1133025c32dff603ce7a61658b164abba8647a39ad8aa75f83856dbc4f038ce7",
          "withoutMetadata": "4f2ccdb383ef4ee68461d44698b9ab55cd6357f06fc80ead3fb6e7c20a4af954",
          "linkedWithoutMetadata": "4f2ccdb383ef4ee68461d44698b9ab55cd6357f06fc80ead3fb6e7c20a4af954"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/ILegosCore.sol:ILegosCore"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address,address)",
          "setAssetRiskParameters(address,(uint256,uint256,uint256,uint256,bool))",
          "updateAssetPrice(address,uint256)",
          "calculateHealthFactor(uint256)",
          "isLiquidationEligible(uint256)",
          "liquidateLoan(uint256,uint256)",
          "claimLiquidatorRewards()",
          "performHealthCheck()",
          "addToRiskMonitoring(uint256)",
          "getLoansAtRisk()",
          "getTotalValueAtRisk()",
          "getRiskMetrics()",
          "updateHealthCheckInterval(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosRiskManager",
            "src": "contracts/core/LegosRiskManager.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "clob",
            "src": "contracts/core/LegosRiskManager.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "healthCheckInterval",
            "src": "contracts/core/LegosRiskManager.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "assetRiskParams",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(RiskParameters)6520_storage)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:25"
            },
            {
              "label": "assetPrices",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:26"
            },
            {
              "label": "loanHealthFactors",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:27"
            },
            {
              "label": "liquidatorRewards",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:36"
            },
            {
              "label": "totalLiquidatorRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:37"
            },
            {
              "label": "lastHealthCheckTime",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:40"
            },
            {
              "label": "healthCheckInterval",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:41"
            },
            {
              "label": "riskLoans",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(RiskParameters)6520_storage)": {
              "label": "mapping(address => struct ILegosCore.RiskParameters)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RiskParameters)6520_storage": {
              "label": "struct ILegosCore.RiskParameters",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minCollateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/ILegosCore.sol:ILegosCore": {
        "src": "contracts/interfaces/ILegosCore.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LegosMath.sol:LegosMath": {
        "src": "contracts/libraries/LegosMath.sol:9",
        "version": {
          "withMetadata": "687cb131c106340451aed6a725c5d63e49babef83359683afc6cb5d2c7a77ec5",
          "withoutMetadata": "70a345d1845f5216f167686d39eff4733e483186424b446ca460c3db8e5a1480",
          "linkedWithoutMetadata": "70a345d1845f5216f167686d39eff4733e483186424b446ca460c3db8e5a1480"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC20.sol:TestERC20": {
        "src": "contracts/test/TestERC20.sol:8",
        "version": {
          "withMetadata": "6e35312b8028d6900a78b8fd7744870ef8bd9c69a5b253b2a289dba40aabb3ea",
          "withoutMetadata": "a56a12c93fcc13382b132016be5b70f9730ff8714c18e430910fbb0efaaa78ca",
          "linkedWithoutMetadata": "a56a12c93fcc13382b132016be5b70f9730ff8714c18e430910fbb0efaaa78ca"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8,uint256)",
          "decimals()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts/test/TestERC20.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "contracts/test/TestERC20.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)21_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/Governor.sol:Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:28",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue",
          "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol:SignatureChecker",
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "getProposalId(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "clock()",
          "CLOCK_MODE()",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:15",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "getProposalId(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "proposalEta(uint256)",
          "proposalNeedsQueuing(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,address,bytes)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:24",
        "version": {
          "withMetadata": "e3310eb20861f05f3328d9f9b6378f28c58a2d568c739636bd38c17170541a29",
          "withoutMetadata": "e3310eb20861f05f3328d9f9b6378f28c58a2d568c739636bd38c17170541a29",
          "linkedWithoutMetadata": "e3310eb20861f05f3328d9f9b6378f28c58a2d568c739636bd38c17170541a29"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getOperationState(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:115"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:30"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)21_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:11",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3854_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3854_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalVote)3854_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:11",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint48)",
          "setVotingPeriod(uint32)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint48",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_votingPeriod",
              "offset": 6,
              "slot": "8",
              "type": "t_uint32",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:25",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "state(uint256)",
          "timelock()",
          "proposalNeedsQueuing(uint256)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(TimelockController)3831",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(TimelockController)3831": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:16",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/types/Time.sol:Time"
        ],
        "methods": [
          "token()",
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:15",
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Trace208)14550_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint208)14555_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Trace208)14550_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/governance/utils/Votes.sol:Votes": {
        "src": "@openzeppelin/contracts/governance/utils/Votes.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/types/Time.sol:Time",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_delegatee",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:38"
            },
            {
              "label": "_delegateCheckpoints",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_struct(Trace208)14550_storage)",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:40"
            },
            {
              "label": "_totalCheckpoints",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Trace208)14550_storage",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Trace208)14550_storage)": {
              "label": "mapping(address => struct Checkpoints.Trace208)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint208)14555_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Trace208)14550_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC1271.sol:IERC1271": {
        "src": "@openzeppelin/contracts/interfaces/IERC1271.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805": {
        "src": "@openzeppelin/contracts/interfaces/IERC5805.sol:9",
        "inherit": [
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:12",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:15",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:23",
        "inherit": [
          "@openzeppelin/contracts/governance/utils/Votes.sol:Votes",
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "numCheckpoints(address)",
          "checkpoints(address,uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_delegatee",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:38"
            },
            {
              "label": "_delegateCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(Trace208)14550_storage)",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:40"
            },
            {
              "label": "_totalCheckpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Trace208)14550_storage",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Trace208)14550_storage)": {
              "label": "mapping(address => struct Checkpoints.Trace208)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint208)14555_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Trace208)14550_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "127e95ebf310a0fcefe8ff788f1b4cc95f07b31c110a65f480d83135bad4cb30",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:15",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:11",
        "version": {
          "withMetadata": "4f75ba00ac41686a91b73f2b6e56afae56ce7cecfc893e1b76df54165f54c86e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "75d428d4d0a9980e6b2df96a1c0a64db2f6c9e17d14940bd5f886a1759f67886",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Nonces.sol:Nonces": {
        "src": "@openzeppelin/contracts/utils/Nonces.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "9cfedfce65f9c5ba0e8402a67f4915141ead9e143ba84283e6163ef0272dd68f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "5c5effd327968eb0a04df34a2ed8d9b9c7665687788df9d97c10bbbda357af51",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "8a7ff2ca73a633f34721a5bacf42fc10345e89a6e504dd8a895869f9ede2925b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "b35ce95c52490d1ac8986f5bc9a0332530b0e0bb7d58b0269966f7b954afeef1",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "7679e5b08e341b968a3319575a7c93eee7fe6586adb6e5963ff05e2299721ef4",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:68"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "ce31b2e9e0c61e40feb8c5ed9d3f600cc8af98cac81fc5a92e1486ac6b1f2278",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol:SignatureChecker": {
        "src": "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol:14",
        "version": {
          "withMetadata": "3c830789696729009012c737a9be2e8d795bef440310218c02be2580c41b24bb",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "5ca3cf8fa99e81ce081df3aaa19dfabf9b970c73ab0e4f8e6a36c1561d83954b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "01d07a2a88989c422fe63efd09bde53d644103dc3f5555b0bb643dcad6cf2ea9",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "aec03d6bc9aa7c8c29941b88cf0790c5578e3cb4c903ec6400baeb883e9a122f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/structs/Checkpoints.sol:Checkpoints": {
        "src": "@openzeppelin/contracts/utils/structs/Checkpoints.sol:16",
        "version": {
          "withMetadata": "4dc4d9fdfa5739b8489d17d4569f4eb33ff702b4d54027809d39ddfdf94bd22f",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:19",
        "version": {
          "withMetadata": "cf4ce9901c80911d3c44759250803209bed343ad264c5f5999b770c97f03182d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/types/Time.sol:Time": {
        "src": "@openzeppelin/contracts/utils/types/Time.sol:20",
        "version": {
          "withMetadata": "ca873abadd71e7a95d27fcd07b80b7459f4fdac2fe625cbcffc920d7a6871717",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/types/Time.sol:Time",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosCLOB.sol:LegosCLOB": {
        "src": "contracts/core/LegosCLOB.sol:16",
        "version": {
          "withMetadata": "f7714e9ebb3ce029ddfb392eaf3a60b4a7acdb7ac4deadcb5ac49044f0ed6fd7",
          "withoutMetadata": "67ccc3f71bcb5e788e6dde1b5e00c834784eef3a363041be2f8b30ee527a9c77",
          "linkedWithoutMetadata": "67ccc3f71bcb5e788e6dde1b5e00c834784eef3a363041be2f8b30ee527a9c77"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/ILegosCore.sol:ILegosCore"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address)",
          "placeLendOrder(address,uint256,uint256,uint256,uint256,address,uint256)",
          "placeBorrowOrder(address,uint256,uint256,uint256,address,uint256,uint256)",
          "cancelOrder(uint256)",
          "getBestLendingRate(address)",
          "getBestBorrowingRate(address)",
          "getOrderBookDepth(address,bool)",
          "getUserOrders(address)",
          "getUserLoans(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosCLOB",
            "src": "contracts/core/LegosCLOB.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextOrderId",
            "src": "contracts/core/LegosCLOB.sol:21"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextLoanId",
            "src": "contracts/core/LegosCLOB.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "protocolFee",
            "src": "contracts/core/LegosCLOB.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "_nextOrderId",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:21"
            },
            {
              "label": "_nextLoanId",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:22"
            },
            {
              "label": "orders",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(Order)21157_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:25"
            },
            {
              "label": "loans",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(Loan)21186_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:26"
            },
            {
              "label": "userOrders",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:27"
            },
            {
              "label": "userLoans",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:28"
            },
            {
              "label": "userCollateral",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:29"
            },
            {
              "label": "assetRiskParams",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(RiskParameters)21251_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:30"
            },
            {
              "label": "lendOrdersByRate",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:33"
            },
            {
              "label": "borrowOrdersByRate",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:34"
            },
            {
              "label": "activeLendRates",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:35"
            },
            {
              "label": "activeBorrowRates",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:36"
            },
            {
              "label": "protocolFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "LegosCLOB",
              "src": "contracts/core/LegosCLOB.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(LoanStatus)21121": {
              "label": "enum ILegosCore.LoanStatus",
              "members": [
                "ACTIVE",
                "REPAID",
                "LIQUIDATED",
                "DEFAULTED"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(OrderStatus)21115": {
              "label": "enum ILegosCore.OrderStatus",
              "members": [
                "PENDING",
                "PARTIALLY_FILLED",
                "FILLED",
                "CANCELLED",
                "EXPIRED"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(OrderType)21108": {
              "label": "enum ILegosCore.OrderType",
              "members": [
                "LEND",
                "BORROW"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
              "label": "mapping(address => mapping(uint256 => uint256[]))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RiskParameters)21251_storage)": {
              "label": "mapping(address => struct ILegosCore.RiskParameters)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Loan)21186_storage)": {
              "label": "mapping(uint256 => struct ILegosCore.Loan)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Order)21157_storage)": {
              "label": "mapping(uint256 => struct ILegosCore.Order)",
              "numberOfBytes": "32"
            },
            "t_struct(Loan)21186_storage": {
              "label": "struct ILegosCore.Loan",
              "members": [
                {
                  "label": "loanId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "principalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "remainingPrincipal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "accruedInterest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "status",
                  "type": "t_enum(LoanStatus)21121",
                  "offset": 0,
                  "slot": "12"
                }
              ],
              "numberOfBytes": "416"
            },
            "t_struct(Order)21157_storage": {
              "label": "struct ILegosCore.Order",
              "members": [
                {
                  "label": "orderId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "orderType",
                  "type": "t_enum(OrderType)21108",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "status",
                  "type": "t_enum(OrderStatus)21115",
                  "offset": 21,
                  "slot": "1"
                },
                {
                  "label": "principalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "remainingAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "expiry",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_struct(RiskParameters)21251_storage": {
              "label": "struct ILegosCore.RiskParameters",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minCollateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosLendingPool.sol:LegosLendingPool": {
        "src": "contracts/core/LegosLendingPool.sol:18",
        "version": {
          "withMetadata": "34c623652ad0341e18356f8f297538573ff24b01358c6eb669ff238a02b708e5",
          "withoutMetadata": "273c07537c93136aafa198381f4f3b0a4279d331f252bfd24c6fdd23596b1dff",
          "linkedWithoutMetadata": "273c07537c93136aafa198381f4f3b0a4279d331f252bfd24c6fdd23596b1dff"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "contracts/interfaces/ILegosCore.sol:ILegosCore",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address,address,string,string,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "borrow(uint256,address,uint256,uint256)",
          "repay(uint256)",
          "getSupplyAPY()",
          "getBorrowAPY()",
          "getAvailableLiquidity()",
          "getTotalPoolAssets()",
          "getUserBorrowBalance(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosLendingPool",
            "src": "contracts/core/LegosLendingPool.sol:64"
          },
          {
            "kind": "state-variable-immutable",
            "name": "underlyingAsset",
            "src": "contracts/core/LegosLendingPool.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "clob",
            "src": "contracts/core/LegosLendingPool.sol:24"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityIndex",
            "src": "contracts/core/LegosLendingPool.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "borrowIndex",
            "src": "contracts/core/LegosLendingPool.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "poolConfig",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(PoolConfig)21239_storage",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:25"
            },
            {
              "label": "totalBorrows",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:28"
            },
            {
              "label": "reserveBalance",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:29"
            },
            {
              "label": "lastUpdateTime",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:30"
            },
            {
              "label": "liquidityIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:31"
            },
            {
              "label": "borrowIndex",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:32"
            },
            {
              "label": "activeOrders",
              "offset": 0,
              "slot": "21",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:41"
            },
            {
              "label": "isPoolOrder",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:42"
            },
            {
              "label": "userBorrows",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:45"
            },
            {
              "label": "userBorrowIndex",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosLendingPool",
              "src": "contracts/core/LegosLendingPool.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(PoolConfig)21239_storage": {
              "label": "struct ILegosCore.PoolConfig",
              "members": [
                {
                  "label": "asset",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reserveFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "baseRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "jumpMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "optimalUtilization",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/core/LegosRiskManager.sol:LegosRiskManager": {
        "src": "contracts/core/LegosRiskManager.sol:17",
        "version": {
          "withMetadata": "c603a6cde0dccecde3a8434e6cd7dd3d5612eb9362c88a52a0a1875eb1dcce62",
          "withoutMetadata": "4f2ccdb383ef4ee68461d44698b9ab55cd6357f06fc80ead3fb6e7c20a4af954",
          "linkedWithoutMetadata": "4f2ccdb383ef4ee68461d44698b9ab55cd6357f06fc80ead3fb6e7c20a4af954"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/ILegosCore.sol:ILegosCore"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/libraries/LegosMath.sol:LegosMath"
        ],
        "methods": [
          "(address,address)",
          "setAssetRiskParameters(address,(uint256,uint256,uint256,uint256,bool))",
          "updateAssetPrice(address,uint256)",
          "calculateHealthFactor(uint256)",
          "isLiquidationEligible(uint256)",
          "liquidateLoan(uint256,uint256)",
          "claimLiquidatorRewards()",
          "performHealthCheck()",
          "addToRiskMonitoring(uint256)",
          "getLoansAtRisk()",
          "getTotalValueAtRisk()",
          "getRiskMetrics()",
          "updateHealthCheckInterval(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosRiskManager",
            "src": "contracts/core/LegosRiskManager.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "clob",
            "src": "contracts/core/LegosRiskManager.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "healthCheckInterval",
            "src": "contracts/core/LegosRiskManager.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "assetRiskParams",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(RiskParameters)21251_storage)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:25"
            },
            {
              "label": "assetPrices",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:26"
            },
            {
              "label": "loanHealthFactors",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:27"
            },
            {
              "label": "liquidatorRewards",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:36"
            },
            {
              "label": "totalLiquidatorRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:37"
            },
            {
              "label": "lastHealthCheckTime",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:40"
            },
            {
              "label": "healthCheckInterval",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:41"
            },
            {
              "label": "riskLoans",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "LegosRiskManager",
              "src": "contracts/core/LegosRiskManager.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(RiskParameters)21251_storage)": {
              "label": "mapping(address => struct ILegosCore.RiskParameters)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RiskParameters)21251_storage": {
              "label": "struct ILegosCore.RiskParameters",
              "members": [
                {
                  "label": "maxLTV",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "liquidationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidationPenalty",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "minCollateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isEnabled",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/governance/LegosGovernance.sol:LegosGovernance": {
        "src": "contracts/governance/LegosGovernance.sol:19",
        "version": {
          "withMetadata": "8faa28516eef40fdab2075bfcc7350afacd0914c11c4d5cc09de650b727251b2",
          "withoutMetadata": "8faa28516eef40fdab2075bfcc7350afacd0914c11c4d5cc09de650b727251b2",
          "linkedWithoutMetadata": "8faa28516eef40fdab2075bfcc7350afacd0914c11c4d5cc09de650b727251b2"
        },
        "inherit": [
          "contracts/interfaces/ILegosCore.sol:ILegosCore",
          "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl",
          "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction",
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple",
          "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "proposeParameterUpdate(address,bytes,string,string)",
          "proposeAssetListing(address,(uint256,uint256,uint256,uint256,bool),string,string)",
          "proposeEmergencyAction(address,bytes,string,string)",
          "proposeTreasuryAction(address,uint256,bytes,string,string)",
          "setContractAuthorization(address,bool)",
          "listAsset(address,(uint256,uint256,uint256,uint256,bool))",
          "updateInterestRateModel(address,uint256,uint256,uint256)",
          "updateProtocolFee(address,uint256)",
          "updateLiquidationParameters(address,address,uint256,uint256)",
          "getProposalMetadata(uint256)",
          "getVotingPower(address)",
          "canCreateProposal(address)",
          "emergencyExecute(address,bytes)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "proposalThreshold()",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "supportsInterface(bytes4)",
          "proposalNeedsQueuing(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosGovernance",
            "src": "contracts/governance/LegosGovernance.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:48"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Bytes32Deque)15609_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:56"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint48",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_votingPeriod",
              "offset": 6,
              "slot": "8",
              "type": "t_uint32",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:17"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3854_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:28"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Trace208)14550_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:18"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(TimelockController)3831",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "authorizedContracts",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LegosGovernance",
              "src": "contracts/governance/LegosGovernance.sol:36"
            },
            {
              "label": "proposalMetadata",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_struct(ProposalMetadata)20046_storage)",
              "contract": "LegosGovernance",
              "src": "contracts/governance/LegosGovernance.sol:60"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(TimelockController)3831": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_enum(ProposalType)20027": {
              "label": "enum LegosGovernance.ProposalType",
              "members": [
                "PARAMETER_UPDATE",
                "ASSET_LISTING",
                "RISK_PARAMETER_UPDATE",
                "PROTOCOL_UPGRADE",
                "TREASURY_MANAGEMENT",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_bytes32)": {
              "label": "mapping(uint128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)596_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalMetadata)20046_storage)": {
              "label": "mapping(uint256 => struct LegosGovernance.ProposalMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3854_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)15609_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_uint128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint208)14555_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)596_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "voteStart",
                  "type": "t_uint48",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "voteDuration",
                  "type": "t_uint32",
                  "offset": 26,
                  "slot": "0"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 30,
                  "slot": "0"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 31,
                  "slot": "0"
                },
                {
                  "label": "etaSeconds",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalMetadata)20046_storage": {
              "label": "struct LegosGovernance.ProposalMetadata",
              "members": [
                {
                  "label": "proposalType",
                  "type": "t_enum(ProposalType)20027",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "title",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "target",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "executionTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(ProposalVote)3854_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Trace208)14550_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/ILegosCore.sol:ILegosCore": {
        "src": "contracts/interfaces/ILegosCore.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LegosMath.sol:LegosMath": {
        "src": "contracts/libraries/LegosMath.sol:9",
        "version": {
          "withMetadata": "687cb131c106340451aed6a725c5d63e49babef83359683afc6cb5d2c7a77ec5",
          "withoutMetadata": "70a345d1845f5216f167686d39eff4733e483186424b446ca460c3db8e5a1480",
          "linkedWithoutMetadata": "70a345d1845f5216f167686d39eff4733e483186424b446ca460c3db8e5a1480"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC20.sol:TestERC20": {
        "src": "contracts/test/TestERC20.sol:11",
        "version": {
          "withMetadata": "85f5143664aa6a82f994ec47ddbab25f621f556033a8347ab2e8c8e7d07be6ec",
          "withoutMetadata": "9068c75ffd77f5652a21713a98e366edfd988b229984e3a44ff164c46c74a5b0",
          "linkedWithoutMetadata": "9068c75ffd77f5652a21713a98e366edfd988b229984e3a44ff164c46c74a5b0"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "decimals()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts/test/TestERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_decimals",
              "offset": 20,
              "slot": "5",
              "type": "t_uint8",
              "contract": "TestERC20",
              "src": "contracts/test/TestERC20.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/tokens/LegosToken.sol:LegosToken": {
        "src": "contracts/tokens/LegosToken.sol:16",
        "version": {
          "withMetadata": "23185a57acb4653c14b0d4835d8dd60aac6f0e337e03616d13aee1d439d1cf93",
          "withoutMetadata": "23185a57acb4653c14b0d4835d8dd60aac6f0e337e03616d13aee1d439d1cf93",
          "linkedWithoutMetadata": "23185a57acb4653c14b0d4835d8dd60aac6f0e337e03616d13aee1d439d1cf93"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:ERC20Votes",
          "@openzeppelin/contracts/governance/utils/Votes.sol:Votes",
          "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805",
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "createVestingSchedule(address,uint256,uint256,uint256,uint256)",
          "claimVestedTokens()",
          "getVestedAmount(address)",
          "revokeVesting(address)",
          "stake(uint256)",
          "unstake(uint256)",
          "claimStakingRewards()",
          "getPendingStakingRewards(address)",
          "distributeAllocations()",
          "finishMinting()",
          "updateTreasury(address)",
          "updateStakingRewardRate(uint256)",
          "getVotingPower(address)",
          "getVestingBeneficiaries()",
          "nonces(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LegosToken",
            "src": "contracts/tokens/LegosToken.sol:83"
          },
          {
            "kind": "state-variable-assignment",
            "name": "stakingRewardRate",
            "src": "contracts/tokens/LegosToken.sol:51"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintingFinished",
            "src": "contracts/tokens/LegosToken.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:54"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Nonces",
              "src": "@openzeppelin/contracts/utils/Nonces.sol:14"
            },
            {
              "label": "_delegatee",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:38"
            },
            {
              "label": "_delegateCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_struct(Trace208)14550_storage)",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:40"
            },
            {
              "label": "_totalCheckpoints",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Trace208)14550_storage",
              "contract": "Votes",
              "src": "@openzeppelin/contracts/governance/utils/Votes.sol:42"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "vestingSchedules",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_struct(VestingSchedule)22019_storage)",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:37"
            },
            {
              "label": "isVestingBeneficiary",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:38"
            },
            {
              "label": "vestingBeneficiaries",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:39"
            },
            {
              "label": "stakingInfo",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(StakingInfo)22041_storage)",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:49"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:50"
            },
            {
              "label": "stakingRewardRate",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:51"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "19",
              "type": "t_address",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:55"
            },
            {
              "label": "liquidityMining",
              "offset": 0,
              "slot": "20",
              "type": "t_address",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:56"
            },
            {
              "label": "communityRewards",
              "offset": 0,
              "slot": "21",
              "type": "t_address",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:57"
            },
            {
              "label": "mintingFinished",
              "offset": 20,
              "slot": "21",
              "type": "t_bool",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:60"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "LegosToken",
              "src": "contracts/tokens/LegosToken.sol:61"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint208[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(StakingInfo)22041_storage)": {
              "label": "mapping(address => struct LegosToken.StakingInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Trace208)14550_storage)": {
              "label": "mapping(address => struct Checkpoints.Trace208)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VestingSchedule)22019_storage)": {
              "label": "mapping(address => struct LegosToken.VestingSchedule)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint208)14555_storage": {
              "label": "struct Checkpoints.Checkpoint208",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint48",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint208",
                  "offset": 6,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(StakingInfo)22041_storage": {
              "label": "struct LegosToken.StakingInfo",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "stakingStartTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pendingRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Trace208)14550_storage": {
              "label": "struct Checkpoints.Trace208",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint208)14555_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(VestingSchedule)22019_storage": {
              "label": "struct LegosToken.VestingSchedule",
              "members": [
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "revoked",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint208": {
              "label": "uint208",
              "numberOfBytes": "26"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}